# -*- coding: utf-8 -*-
"""Aula 04 - 07/03 -- JoaoSassi

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TzlLIc-LSkeOfUMhvB_x9MLPMNY-9NOM

# Aula 4 - Extração de Características

## EX 1 - BOW
"""

from sklearn. feature_extraction.text import CountVectorizer

documentos = [
  "gato e cachorro",
  "gato brinca com cachorro",
  "gato e rato"
]

vectorizer = CountVectorizer()

X = vectorizer. fit_transform(documentos)
# fit >>> cria um vocabulário das palavras
# transforme >>> conta a frequencia de cada palavra no corpus

print(f"Vocabulario: {vectorizer. vocabulary_}")

print("Matriz BoW:")
print (X. toarray())

"""## EX 2 - BOW com TF-IDF"""

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer

documentos = [
  "O cachorro gosta de passear no parque",
  "O gato dorme no sofá o dia todo",
  "Cachorros e gatos podem ser bons amigos"
]

#BOW
vectorizer_bow = CountVectorizer()
x_bow = vectorizer_bow.fit_transform(documentos)

print(f"Vocabulario BoW: {vectorizer_bow. vocabulary_}")
print("Matriz BoW:")
print(x_bow.toarray())

#BOW+TF-IDF
vectorizer_tfidf = TfidfVectorizer()
x_tfidf = vectorizer_tfidf.fit_transform(documentos)

print(f"\nVocabulario TF-IDF: {vectorizer_tfidf.vocabulary_}")
print("Matriz TF-IDF")
print(x_tfidf.toarray())

"""## EX 4 - WordEmbedding com Word2VEX"""

from gensim.models import Word2Vec

corpus = [
  ["o","cachorro","está","dormindo"],
  ["o","gato","está","dormindo"]
]

model = Word2Vec(sentences=corpus, vector_size=100, window=5, min_count=1,sg=1)
# sentences = define o texto a ser transformado em vetor
# vector_size = define a dimensão dos vetores que representarão as palavras
# window = define a janela de contexto. considera as palavras antes e as palavras depois no alvo para aprender
# min_count = ignora as palavras que aparecer 1 vez no corpus
# indica o modelo utilizado
# 1 = skip_gram;
# 0 = CBOW

vector = model.wv['cachorro']

similarity = model.wv.similarity('cachorro','gato')

print("Similaridade entre 'cachorro' e 'gato': ", similarity)

from gensim.models import Word2Vec

corpus = [
  ["o", "cachorro", "está", "latindo", "no", "quintal"],
  ["o", "gato", "está", "miando", "no", "telhado"],
  ["o", "pássaro", "está", "voando", "no", "céu",'lua'],
  ["a", "bola", "está", "rolando", "no", "chão"],
  ["a", "criança", "está", "brincando", "com", "o", "cachorro"],
  ["o", "gato", "e", "o", "rato", "são", "inimigos"],
  ["a", "água", "está", "quente", "na", "caneca"],
  ["o", "sol", "está", "brilhando", "no", "céu"],
  ["a", "lua", "está", "cheia", "hoje",'no' , 'céu' ],
  ["a", "computador", "está", "ligado", "na", "mesa"],
  ['a','lua' ,'esta' , 'no' , 'ceu', 'lua' , 'bonita' ]
]

model = Word2Vec(sentences=corpus, vector_size=100, window=5, min_count=1, sg=1)

print(f"Similaridade entre cachorro e gato: {model.wv.similarity('cachorro', 'gato' ) }")
print(f"Similaridade entre cachorro e bola: {model.wv.similarity('cachorro', 'bola' ) }")
print(f"Similaridade entre céu e lua: {model.wv.similarity('ceu', 'lua' ) }")
print(f"Similaridade entre computador e mesa: {model.wv.similarity('computador', 'mesa' ) }")