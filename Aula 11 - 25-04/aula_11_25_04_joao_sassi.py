# -*- coding: utf-8 -*-
"""Aula 11 - 25-04 -- Joao Sassi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gTn_0ZOGcW_w8b_Os-_WT3XdVcK-OOmS

# Análise de Sentimentos e Classificação dos textos em PLN
Nesta aula iremos utilizar um exemplo de Análise dos sentimentos de um texto. Também iremos classificá-los.

## Exemplos de roteiro

### EX 01 - Analise de sentimentos NLTK
"""

# Importando as bibliotecas

import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

nltk.download('vader_lexicon')
nltk.download('punkt')

# Inicializando variáveis e definindo os textos

sid = SentimentIntensityAnalyzer()

textos = [
  "Este filme é incrível! Eu adorei cada minuto.",
  "Odiei este filme. Foi uma perda de tempo.",
  "O filme foi ok, nada de especial.",
  "Estou muito feliz com o produto, funciona perfeitamente!",
  "Que serviço horrível! Nunca mais compro nessa loja."
]

# Análise do sentimento dos textos

for texto in textos:
  print(f"Texto: {texto}")
  ss = sid.polarity_scores(texto)
  print(f"Pontuaçao: {ss}")
  if ss['compound'] >= 0.05:
    print("Sentimento: Positivo")
  elif ss['compound' ] <= -0.05:
    print("Sentimento: Negativo")
  else:
    print("Sentimento: Neutro")
  print("\n")

"""### EX 02 - Análise sentimentos de avaliações de Filmes | Naives Bayes"""

# Criando as funções que calculam a quantidade de palavras, probabilidades e etc

import numpy as np

def contar_palavras(avaliacoes, sentimento):
  """Conta a frequência de cada palavra em avaliações de um dado sentimento."""
  contagem = {}
  for avaliacao, sent in avaliacoes:
    if sent == sentimento:
      for palavra in avaliacao.lower().split():
        if palavra in contagem:
          contagem[palavra] += 1
        else:
          contagem[palavra] = 1

  return contagem

def calcular_probabilidade_sentimento(avaliacoes, sentimento):
  """Calcula a probabilidade de uma avaliação ser de um dado sentimento."""
  total_avaliacoes = len(avaliacoes)
  contagem_sentimento = sum(1 for _, sent in avaliacoes if sent == sentimento)
  return contagem_sentimento / total_avaliacoes

def calcular_probabilidade_palavra_dado_sentimento(palavra, contagem_palavras, total_palavras_sentimento, total_palavras_vocabulario, alpha=1):
  """Calcula a probabilidade de uma palavra aparecer dado um sentimento (com suavizacao Laplace)."""
  contagem_palavra = contagem_palavras.get(palavra, 0)
  return (contagem_palavra + alpha) / (total_palavras_sentimento + alpha * total_palavras_vocabulario)

# Criando a função que calcula a classificação de cada palavra, verificando como ela irá pertencer a um sentimento

def classificar_avaliacao(avaliacao, avaliacoes):
  """Classifica o sentimento de uma nova avaliaçao usando Naive Bayes."""

  sentimentos = ["Positivo", "Negativo"]
  probabilidades_sentimento = {}

  # Calcular as probabilidades dos sentimentos
  probabilidades_sentimento["Positivo"] = calcular_probabilidade_sentimento(avaliacoes, "Positivo")
  probabilidades_sentimento["Negativo"] = calcular_probabilidade_sentimento(avaliacoes, "Negativo")

  # Contar palavras de cada sentimento
  contagem_palavras_positivo = contar_palavras(avaliacoes, "Positivo")
  contagem_palavras_negativo = contar_palavras(avaliacoes, "Negativo")

  # Calcular a quantidade total de palavras de cada sentimento
  total_palavras_positivo = sum(contagem_palavras_positivo.values())
  total_palavras_negativo = sum(contagem_palavras_negativo.values())

  # Calcular o tamanho do vocábulo
  vocabulario = set()
  for avaliacao, _ in avaliacoes:
    for palavra in avaliacao.lower().split():
        vocabulario.add(palavra)
  total_palavras_vocabulario = len(vocabulario)

  # Calcular a probabilidade para cada um dos sentimento
  for sentimento in sentimentos:
      probabilidade_total = probabilidades_sentimento[sentimento]
      contagem_palavras_sentimento = contagem_palavras_positivo if sentimento == "Positivo" else contagem_palavras_negativo
      total_palavras_sentimento = total_palavras_positivo if sentimento == "Positivo" else total_palavras_negativo

      for palavra in avaliacao.lower().split():
          probabilidade_palavra = calcular_probabilidade_palavra_dado_sentimento(
            palavra, contagem_palavras_sentimento, total_palavras_sentimento, total_palavras_vocabulario
        )
          probabilidade_total *= probabilidade_palavra
      probabilidades_sentimento[sentimento] = probabilidade_total

  # Classificar os sentimentos com base na maior probabilidade
  melhor_sentimento = max(probabilidades_sentimento, key=probabilidades_sentimento.get)
  return melhor_sentimento

# Fornecendo um modelo diferente para treinamento

avaliacoes = [
    ("Filme incrível! Adorei a atuação.", "Positivo"),
    ("Roteiro fraco, não recomendo.", "Negativo"),
    ("Atuação boa, mas filme longo.", "Positivo"),
    ("Péssimo! Perdi meu tempo.", "Negativo"),
]

# Fornecendo frase e classificando essa nova avaliação

nova_avaliacao = input("o que voce achou do filme O Corcunda de Notre dame?")

sentimento = classificar_avaliacao(nova_avaliacao, avaliacoes)
print(f"A avaliação '{nova_avaliacao}' foi classificada como: {sentimento}")

# Treinando com novos modelos de dados

avaliacoes = [
    ("Filme incrível! Adorei a atuação, roteiro e direção.", "Positivo"),
    ("Roteiro fraco, atuação ruim, não recomendo. Perda de tempo.", "Negativo"),
    ("Atuação boa, mas filme um pouco longo e arrastado.", "Positivo"),
    ("Péssimo! Perdi meu tempo, dinheiro e paciência. Horrível.", "Negativo"),
    ("Amei! Elenco maravilhoso, fotografia impecável. Recomendo muito!", "Positivo"),
    ("Chato, previsível e sem graça. Saí no meio do filme.", "Negativo"),
    ("Uma obra-prima! Roteiro inteligente, atuações memoráveis.", "Positivo"),
    ("Cansativo, atuações forçadas, final decepcionante.", "Negativo"),
    ("Divertido e emocionante! Ótimo para assistir com a família.", "Positivo"),
    ("Clichê, sem originalidade, diálogos fracos. Não vale a pena.", "Negativo"),
    ("Surpreendente e envolvente! Me prendeu do início ao fim.", "Positivo"),
    ("Confuso, mal dirigido, edição amadora. Um desastre.", "Negativo"),
    ("Atuação excelente, história cativante, trilha sonora perfeita.", "Positivo"),
    ("Atuações medianas, história arrastada, trilha sonora irritante.", "Negativo"),
    ("Roteiro bem construído, diálogos afiados, direção impecável.", "Positivo"),
    ("Roteiro fraco, diálogos bobos, direção perdida.", "Negativo"),
    ("Uma experiência cinematográfica única! Recomendo a todos os amantes do cinema.", "Positivo"),
    ("Um filme esquecível, sem emoção e sem impacto.", "Negativo"),
    ("Comovente e inspirador! Me fez refletir sobre a vida.", "Positivo"),
    ("Decepcionante e frustrante! Não recomendo nem para passar o tempo.", "Negativo"),
    ("Ótimo, gostei muito",'Positivo')
]

"""## Desafios do Roteiro"""