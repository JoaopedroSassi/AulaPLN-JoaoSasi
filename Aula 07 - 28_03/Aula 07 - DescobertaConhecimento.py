# -*- coding: utf-8 -*-
"""Aula 07 - 28/03 -- Joao Sassi

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oOaJ_sftVKcxsDORFClo54ty5zyStlVR

# Aula 07 - Descoberta de Conhecimento em Textos

## EX01 - NER com spaCy
"""

!pip install spacy
!python -m spacy download pt_core_news_sm

import spacy

nlp = spacy.load("pt_core_news_sm")

texto = "Elon Musk, CEO da Tesla, visitou o Brasil em maio de 2022 para discutir investimentos de R$ 5 bilhoes."

doc = nlp(texto)

for entidade in doc.ents:
  print(f"{entidade.text} - {entidade.label_}")

"""## EX 02 - NER com NLTK"""

import nltk
from nltk.tokenize import word_tokenize
from nltk.tag import pos_tag
from nltk.chunk import ne_chunk

#nltk.download('punkt_tab')
#nltk.download('maxent_ne_chunker_tab')
#nltk.download('words')
#nltk.download('averaged_perceptron_tagger_eng')

texto = "Barack Obama foi presidente dos Estados Unidos e ganhou o Premio Nobel da Paz."

# Tokenizaçao e POS tagging
tokens = word_tokenize(texto)
tags = pos_tag(tokens)

# Identificaçao de entidades
entidades = ne_chunk(tags)

print(entidades)

"""## EX 03 - Extração de Informações com Expressões Regulares"""

import re

texto = "O pagamento deve ser feito ate 30 de junho de 2025."

padrao = r"\d{1,2} de [a-zA-Z]+ de \d{4}"
datas = re.findall(padrao, texto)

print(datas)

"""## EX 04 - Extração de informação com Regras heurísticas e Dicionários"""

profissoes = ["engenheiro", "cientista de dados", "medico", "advogado"]

texto = "Joao e engenheiro de software e trabalha na Tesla."

for profissao in profissoes:
  if profissao in texto:
    print(f"Profissao identificada: {profissao}")

"""## EX 05 - Mineração de Textos com Frequência de Palavras e N-gramas"""

import nltk
from nltk.util import ngrams
from collections import Counter

texto = "Mineracao de textos envolve analise de palavras, palavras importantes e padroes."
palavras = nltk.word_tokenize(texto.lower())

frequencia = Counter(palavras)
print(frequencia.most_common(5))

bigrams = list(ngrams(palavras, 2))
print(bigrams)

"""## EX 06 - Mineração de Texto"""

#!pip install gensim
!pip install --force-reinstall gensim

from gensim import corpora, models

documentos = [["mineração", "textos", "dados"],
              ["inteligência", "artificial", "aprendizado"],
              ["dados", "aprendizado", "estatistica"]]

dicionario = corpora.Dictionary(documentos)
corpus = [dicionario.doc2bow(texto) for texto in documentos]

lda_modelo = models.LdaModel(corpus, num_topics=2, id2word=dicionario)
print(lda_modelo.print_topics())